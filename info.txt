##TypeScript:
->Js with superpowers.As it is like an more powerful
version of js.It lets you do everything that js does,but it adds some extra
features to make your life easier when writing lrger and more complex programs.
-> npm install -g typescript 
tsc -v  
npm i -g ts-node
#Annotations
->Annotations are used to specify the data type of a a variable,
parameter,function return value,and other types of values,Annotationshelp develpers
catch errors early in development by allowing them specify what types
of values can be assigned to a given variable or passed as an argument to a function
->eg: let myName:string='abc'
# type Interface
->it is a feature in ts that allows the compiler to automatically 
determine the type of a variable based on its value.In other words.
If you declare a variablewithout explicitly it's type ,TypeScriptwill try 
to inter the type based on the value you assign to it.
#Any Type
->ts has any type that can be used to represent  any type .when a variable
is annotated with the any type.Ts will allow it to have any value and disable all type checking for that variable and its properties
# arrow function
const double2=(x:number):number=>x*x; 
# void 
absence of any value mostly used in return to state no return
#Never
->this keyword is used to indicate that a function will not return anything or that a variable can never have a value.
the never type is useful for indicating that a certain 
code paths shpuld never be reached,or that cwertain values are impossible.
it can help catch errors at compile-time instead of runtime.
#Never
->Afunction that always throws an errors
-> A function that has an infinite loop
->A function that can never have a value
#Arrays types 
->are a type of object that can store multiple values of 
same data type.Arrays in ts are typed which means you can specify the type of values that an array can hold
->[] notation or Array<type> generic notation
-->multi dimensional array
->nested square brackets [][]
#Objects
in ts object is a structured data type that represents a collection of properties
each with a key and an associated value.the properties of an object
can have specific types and the object itself can be annotated with a type,often defined using an interface oer atype alias.
ts uses structural typing,meaning that the shape of an object (it's structure or properties) is what matters for type compatibility
## factory function in js or ts is a function which create and return new object everytime it is called.
# type Aliases -> it is a way to create a new name for an existing type.
it allows you to define a custom type that refers to another type and give it a more meaningful or descriptive name.
Type alisaes are defined using the type keyword,followd by the name of alias,an qual sign and the type it refers to
#optional PARAMETER(?) with or without that property it will work
#readonly ->only read and can't change that property
#itersection types(&)
->it is sway to combining multiple types into a single type taht include
all the properties and methods of each constituent type.An intersection typeis denoted by the & symbol
# unions(|)-> are used to declare  a type that can have one of several 
possible types.Unions are useful when we want to allow a variable or parameter to accept multiple types
The syntax for defining a union type in ts uses the pipe symbol
#Literal types-> allow you to specify a value that can only be one specific literal value.This means that a variable with a literal value
This means that a variable with a literal type can only have one specific value and no other.
#tuples->is a type that represents an array with a fixed number of elements
where each element can have a different type.The order of types inn tuple definition corresponds to order of values in actual array .
tuples are similar to arrays,but they have a specific structure and can be used to model finite sequences with known 
lengths.
#Enums-> it is defined a set of named constants.Enums allow you to definea
collections of related values that can be used intrchangeably in your code
# class properties Annotations
->this allows you to define data type of property and ensure that 
it is always consistent
class person{
   readonly  name:string;
    age:number;
    constructor(name:string,age:number){
        this.name=name;
        this.age=age;
    }
}
##Acess modifier
-> you can use access modifier to control the visibility of class members(properties and methods).
Acess modifiers determine the ways in which class members can be acessed from within  outside the class

